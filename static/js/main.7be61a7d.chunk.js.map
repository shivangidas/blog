{"version":3,"sources":["images/books8.jpg","components/image.js","posts/post1.js","posts/post2.js","Links.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Image","imageProps","this","props","react_default","a","createElement","src","alt","height","width","caption","React","Component","Post","className","components_image","books","Links","key","Link","to","App","BrowserRouter","Route","exact","path","component","Post1","Post2","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7be61a7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/books8.9a6c97a7.jpg\";","import React from \"react\";\r\n\r\nclass Image extends React.Component {\r\n  render() {\r\n    const imageProps = this.props;\r\n    return (\r\n      <figure>\r\n        <img\r\n          src={imageProps.src}\r\n          alt={imageProps.alt}\r\n          height={imageProps.height ? imageProps.height : \"\"}\r\n          width={imageProps.width ? imageProps.width : \"\"}\r\n        />\r\n        <figcaption>{imageProps.caption ? imageProps.caption : \"\"}</figcaption>\r\n      </figure>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from \"react\";\r\nimport \"./post.css\";\r\nimport Image from \"../components/image\";\r\nimport books from \"../images/books8.jpg\";\r\nclass Post extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Post\">\r\n        <header className=\"Post-header\">\r\n          <h1>I am post 1</h1>\r\n          <Image alt=\"Books\" src={books} height=\"200px\" />\r\n          <p>\r\n            Oh God! Routing was so easy and I was so confused by how to do it.\r\n            The first post will be about routing when I get to writing it.\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\r\nimport \"./post.css\";\r\nimport Image from \"../components/image\";\r\nimport books from \"../images/books8.jpg\";\r\nclass Post extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Post\">\r\n        <header className=\"Post-header\">\r\n          <h1>I am post 2</h1>\r\n          <Image alt=\"Books\" src={books} height=\"300px\" />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class Links extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        <li key=\"1\">\r\n          <Link to=\"/post1\">post 1</Link>\r\n        </li>\r\n        <li key=\"2\">\r\n          <Link to=\"/post2\">post 2</Link>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Post1 from \"./posts/post1.js\";\nimport Post2 from \"./posts/post2.js\";\n\nimport Links from \"./Links.js\";\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>\n              <Link to=\"/blog\">Shivangi's blog!</Link>\n            </h1>\n\n            <Route exact path=\"/blog\" component={Links} />\n            <Route path=\"/post1\" component={Post1} />\n            <Route path=\"/post2\" component={Post2} />\n          </header>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}